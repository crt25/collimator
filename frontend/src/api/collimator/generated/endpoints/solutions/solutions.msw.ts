/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  AnalysisOutputDto,
  CallsFunctionCriterionOutputDto,
  ContainsConditionCriterionOutputDto,
  ContainsFunctionDeclarationCriterionOutputDto,
  ContainsLoopDeclarationCriterionOutputDto,
  ExistingSolutionDto,
} from "../../models";

export const getSolutionsControllerCreateV0ResponseMock = (
  overrideResponse: Partial<ExistingSolutionDto> = {},
): ExistingSolutionDto => ({
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.number.int({ min: undefined, max: undefined }),
  sessionId: faker.number.int({ min: undefined, max: undefined }),
  studentId: faker.number.int({ min: undefined, max: undefined }),
  taskId: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getSolutionsControllerFindAllV0ResponseMock =
  (): ExistingSolutionDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
      id: faker.number.int({ min: undefined, max: undefined }),
      sessionId: faker.number.int({ min: undefined, max: undefined }),
      studentId: faker.number.int({ min: undefined, max: undefined }),
      taskId: faker.number.int({ min: undefined, max: undefined }),
    }));

export const getSolutionsControllerFindOneV0ResponseMock = (
  overrideResponse: Partial<ExistingSolutionDto> = {},
): ExistingSolutionDto => ({
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  id: faker.number.int({ min: undefined, max: undefined }),
  sessionId: faker.number.int({ min: undefined, max: undefined }),
  studentId: faker.number.int({ min: undefined, max: undefined }),
  taskId: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getSolutionsControllerAnalysisV0ResponseCallsFunctionCriterionOutputDtoMock =
  (
    overrideResponse: Partial<CallsFunctionCriterionOutputDto> = {},
  ): CallsFunctionCriterionOutputDto => ({
    ...{ callsFunction: faker.datatype.boolean() },
    ...overrideResponse,
  });

export const getSolutionsControllerAnalysisV0ResponseContainsConditionCriterionOutputDtoMock =
  (
    overrideResponse: Partial<ContainsConditionCriterionOutputDto> = {},
  ): ContainsConditionCriterionOutputDto => ({
    ...{ containsCondition: faker.datatype.boolean() },
    ...overrideResponse,
  });

export const getSolutionsControllerAnalysisV0ResponseContainsFunctionDeclarationCriterionOutputDtoMock =
  (
    overrideResponse: Partial<ContainsFunctionDeclarationCriterionOutputDto> = {},
  ): ContainsFunctionDeclarationCriterionOutputDto => ({
    ...{ containsFunctionDeclaration: faker.datatype.boolean() },
    ...overrideResponse,
  });

export const getSolutionsControllerAnalysisV0ResponseContainsLoopDeclarationCriterionOutputDtoMock =
  (
    overrideResponse: Partial<ContainsLoopDeclarationCriterionOutputDto> = {},
  ): ContainsLoopDeclarationCriterionOutputDto => ({
    ...{ containsLoop: faker.datatype.boolean() },
    ...overrideResponse,
  });

export const getSolutionsControllerAnalysisV0ResponseMock =
  (): AnalysisOutputDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      criteria: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() =>
        faker.helpers.arrayElement([
          {
            ...getSolutionsControllerAnalysisV0ResponseCallsFunctionCriterionOutputDtoMock(),
          },
          {
            ...getSolutionsControllerAnalysisV0ResponseContainsConditionCriterionOutputDtoMock(),
          },
          {
            ...getSolutionsControllerAnalysisV0ResponseContainsFunctionDeclarationCriterionOutputDtoMock(),
          },
          {
            ...getSolutionsControllerAnalysisV0ResponseContainsLoopDeclarationCriterionOutputDtoMock(),
          },
        ]),
      ),
      solutionId: faker.number.int({ min: undefined, max: undefined }),
    }));

export const getSolutionsControllerCreateV0MockHandler = (
  overrideResponse?:
    | ExistingSolutionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExistingSolutionDto> | ExistingSolutionDto),
) => {
  return http.post(
    "*/api/v0/classes/:classId/sessions/:sessionId/task/:taskId/solutions",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSolutionsControllerCreateV0ResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSolutionsControllerFindAllV0MockHandler = (
  overrideResponse?:
    | ExistingSolutionDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ExistingSolutionDto[]> | ExistingSolutionDto[]),
) => {
  return http.get(
    "*/api/v0/classes/:classId/sessions/:sessionId/task/:taskId/solutions",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSolutionsControllerFindAllV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSolutionsControllerFindOneV0MockHandler = (
  overrideResponse?:
    | ExistingSolutionDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ExistingSolutionDto> | ExistingSolutionDto),
) => {
  return http.get(
    "*/api/v0/classes/:classId/sessions/:sessionId/task/:taskId/solutions/:id",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSolutionsControllerFindOneV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSolutionsControllerDownloadOneV0MockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.get(
    "*/api/v0/classes/:classId/sessions/:sessionId/task/:taskId/solutions/:id/download",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
  );
};

export const getSolutionsControllerAnalysisV0MockHandler = (
  overrideResponse?:
    | AnalysisOutputDto[]
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<AnalysisOutputDto[]> | AnalysisOutputDto[]),
) => {
  return http.post(
    "*/api/v0/classes/:classId/sessions/:sessionId/task/:taskId/solutions/analysis",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSolutionsControllerAnalysisV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getSolutionsMock = () => [
  getSolutionsControllerCreateV0MockHandler(),
  getSolutionsControllerFindAllV0MockHandler(),
  getSolutionsControllerFindOneV0MockHandler(),
  getSolutionsControllerDownloadOneV0MockHandler(),
  getSolutionsControllerAnalysisV0MockHandler(),
];
