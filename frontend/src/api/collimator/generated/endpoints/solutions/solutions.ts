/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import { fetchApi } from "../../../../fetch";
import type {
  CreateSolutionDto,
  CurrentAnalysesDto,
  ExistingStudentSolutionDto,
} from "../../models";

export const getSolutionsControllerCreateStudentSolutionV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/student`;
};

export const solutionsControllerCreateStudentSolutionV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  createSolutionDto: CreateSolutionDto,
  options?: RequestInit,
): Promise<ExistingStudentSolutionDto> => {
  const formData = new FormData();
  createSolutionDto.tests.forEach((value) =>
    formData.append("tests", JSON.stringify(value)),
  );
  formData.append("file", createSolutionDto.file);

  return fetchApi<ExistingStudentSolutionDto>(
    getSolutionsControllerCreateStudentSolutionV0Url(
      classId,
      sessionId,
      taskId,
    ),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getSolutionsControllerFindAllStudentSolutionsV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/student`;
};

export const solutionsControllerFindAllStudentSolutionsV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<ExistingStudentSolutionDto[]> => {
  return fetchApi<ExistingStudentSolutionDto[]>(
    getSolutionsControllerFindAllStudentSolutionsV0Url(
      classId,
      sessionId,
      taskId,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerFindCurrentAnalysesV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/current-analyses`;
};

export const solutionsControllerFindCurrentAnalysesV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<CurrentAnalysesDto> => {
  return fetchApi<CurrentAnalysesDto>(
    getSolutionsControllerFindCurrentAnalysesV0Url(classId, sessionId, taskId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerDownloadLatestStudentSolutionV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/student/latest`;
};

export const solutionsControllerDownloadLatestStudentSolutionV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<ExistingStudentSolutionDto> => {
  return fetchApi<ExistingStudentSolutionDto>(
    getSolutionsControllerDownloadLatestStudentSolutionV0Url(
      classId,
      sessionId,
      taskId,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerFindOneStudentSolutionV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/student/${id}`;
};

export const solutionsControllerFindOneStudentSolutionV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingStudentSolutionDto> => {
  return fetchApi<ExistingStudentSolutionDto>(
    getSolutionsControllerFindOneStudentSolutionV0Url(
      classId,
      sessionId,
      taskId,
      id,
    ),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Delete all solutions by a student for a given session/task
 */
export const getSolutionsControllerDeleteOneStudentSolutionV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/student/${id}`;
};

export const solutionsControllerDeleteOneStudentSolutionV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
  options?: RequestInit,
): Promise<void> => {
  return fetchApi<void>(
    getSolutionsControllerDeleteOneStudentSolutionV0Url(
      classId,
      sessionId,
      taskId,
      id,
    ),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getSolutionsControllerDownloadOneV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  hash: string,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/${hash}/download`;
};

export const solutionsControllerDownloadOneV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  hash: string,
  options?: RequestInit,
): Promise<void> => {
  return fetchApi<void>(
    getSolutionsControllerDownloadOneV0Url(classId, sessionId, taskId, hash),
    {
      ...options,
      method: "GET",
    },
  );
};
