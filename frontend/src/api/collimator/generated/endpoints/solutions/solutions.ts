/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateSolutionDto,
  CurrentAnalysisDto,
  ExistingSolutionDto,
} from "../../models";
import { fetchApi } from "../../../../fetch";

export const getSolutionsControllerCreateV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions`;
};

export const solutionsControllerCreateV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  createSolutionDto: CreateSolutionDto,
  options?: RequestInit,
): Promise<ExistingSolutionDto> => {
  const formData = new FormData();
  formData.append("totalTests", createSolutionDto.totalTests.toString());
  formData.append("passedTests", createSolutionDto.passedTests.toString());
  formData.append("file", createSolutionDto.file);

  return fetchApi<Promise<ExistingSolutionDto>>(
    getSolutionsControllerCreateV0Url(classId, sessionId, taskId),
    {
      ...options,
      method: "POST",
      body: formData,
    },
  );
};

export const getSolutionsControllerFindAllV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions`;
};

export const solutionsControllerFindAllV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<ExistingSolutionDto[]> => {
  return fetchApi<Promise<ExistingSolutionDto[]>>(
    getSolutionsControllerFindAllV0Url(classId, sessionId, taskId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerFindCurrentAnalysisV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/current-analyses`;
};

export const solutionsControllerFindCurrentAnalysisV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<CurrentAnalysisDto[]> => {
  return fetchApi<Promise<CurrentAnalysisDto[]>>(
    getSolutionsControllerFindCurrentAnalysisV0Url(classId, sessionId, taskId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerFindOneV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/${id}`;
};

export const solutionsControllerFindOneV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingSolutionDto> => {
  return fetchApi<Promise<ExistingSolutionDto>>(
    getSolutionsControllerFindOneV0Url(classId, sessionId, taskId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

/**
 * @summary Delete all solutions by a student for a given session/task
 */
export const getSolutionsControllerDeleteOneV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/${id}`;
};

export const solutionsControllerDeleteOneV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
  options?: RequestInit,
): Promise<void> => {
  return fetchApi<Promise<void>>(
    getSolutionsControllerDeleteOneV0Url(classId, sessionId, taskId, id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getSolutionsControllerDownloadOneV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/${id}/download`;
};

export const solutionsControllerDownloadOneV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  id: number,
  options?: RequestInit,
): Promise<void> => {
  return fetchApi<Promise<void>>(
    getSolutionsControllerDownloadOneV0Url(classId, sessionId, taskId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSolutionsControllerLatestSolutionV0Url = (
  classId: number,
  sessionId: number,
  taskId: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${sessionId}/task/${taskId}/solutions/latest`;
};

export const solutionsControllerLatestSolutionV0 = async (
  classId: number,
  sessionId: number,
  taskId: number,
  options?: RequestInit,
): Promise<ExistingSolutionDto> => {
  return fetchApi<Promise<ExistingSolutionDto>>(
    getSolutionsControllerLatestSolutionV0Url(classId, sessionId, taskId),
    {
      ...options,
      method: "GET",
    },
  );
};
