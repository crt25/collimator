/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import { SessionStatus } from "../../models";
import type {
  DeletedSessionDto,
  ExistingSessionDto,
  ExistingSessionExtendedDto,
} from "../../models";

export const getSessionsControllerCreateV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionDto> = {},
): ExistingSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerFindAllV0ResponseMock =
  (): ExistingSessionDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      class: {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.word.sample(),
      },
      createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
      description: faker.word.sample(),
      id: faker.number.int({ min: undefined, max: undefined }),
      lesson: {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.word.sample(),
      },
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(Object.values(SessionStatus)),
      ]),
      tasks: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.number.int({ min: undefined, max: undefined })),
      title: faker.word.sample(),
    }));

export const getSessionsControllerFindOneV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionExtendedDto> = {},
): ExistingSessionExtendedDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({ min: undefined, max: undefined }),
    title: faker.word.sample(),
  })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerUpdateV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionDto> = {},
): ExistingSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerRemoveV0ResponseMock = (
  overrideResponse: Partial<DeletedSessionDto> = {},
): DeletedSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerStartV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionDto> = {},
): ExistingSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerPauseV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionDto> = {},
): ExistingSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerFinishV0ResponseMock = (
  overrideResponse: Partial<ExistingSessionDto> = {},
): ExistingSessionDto => ({
  class: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  description: faker.word.sample(),
  id: faker.number.int({ min: undefined, max: undefined }),
  lesson: {
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
  },
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(Object.values(SessionStatus)),
  ]),
  tasks: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => faker.number.int({ min: undefined, max: undefined })),
  title: faker.word.sample(),
  ...overrideResponse,
});

export const getSessionsControllerCreateV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExistingSessionDto> | ExistingSessionDto),
) => {
  return http.post("*/api/v0/classes/:classId/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsControllerCreateV0ResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsControllerFindAllV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ExistingSessionDto[]> | ExistingSessionDto[]),
) => {
  return http.get("*/api/v0/classes/:classId/sessions", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsControllerFindAllV0ResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsControllerFindOneV0MockHandler = (
  overrideResponse?:
    | ExistingSessionExtendedDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ExistingSessionExtendedDto> | ExistingSessionExtendedDto),
) => {
  return http.get("*/api/v0/classes/:classId/sessions/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsControllerFindOneV0ResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsControllerUpdateV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<ExistingSessionDto> | ExistingSessionDto),
) => {
  return http.patch("*/api/v0/classes/:classId/sessions/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsControllerUpdateV0ResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsControllerRemoveV0MockHandler = (
  overrideResponse?:
    | DeletedSessionDto
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeletedSessionDto> | DeletedSessionDto),
) => {
  return http.delete("*/api/v0/classes/:classId/sessions/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSessionsControllerRemoveV0ResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getSessionsControllerStartV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExistingSessionDto> | ExistingSessionDto),
) => {
  return http.post(
    "*/api/v0/classes/:classId/sessions/:id/start",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSessionsControllerStartV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSessionsControllerPauseV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExistingSessionDto> | ExistingSessionDto),
) => {
  return http.post(
    "*/api/v0/classes/:classId/sessions/:id/pause",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSessionsControllerPauseV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};

export const getSessionsControllerFinishV0MockHandler = (
  overrideResponse?:
    | ExistingSessionDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ExistingSessionDto> | ExistingSessionDto),
) => {
  return http.post(
    "*/api/v0/classes/:classId/sessions/:id/finish",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSessionsControllerFinishV0ResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
  );
};
export const getSessionsMock = () => [
  getSessionsControllerCreateV0MockHandler(),
  getSessionsControllerFindAllV0MockHandler(),
  getSessionsControllerFindOneV0MockHandler(),
  getSessionsControllerUpdateV0MockHandler(),
  getSessionsControllerRemoveV0MockHandler(),
  getSessionsControllerStartV0MockHandler(),
  getSessionsControllerPauseV0MockHandler(),
  getSessionsControllerFinishV0MockHandler(),
];
