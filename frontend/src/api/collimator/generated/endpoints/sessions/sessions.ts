/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import { fetchApi } from "../../../../fetch";
import type {
  CreateSessionDto,
  DeletedSessionDto,
  ExistingSessionDto,
  ExistingSessionExtendedDto,
  IsSessionAnonymousDto,
  StudentSessionProgressDto,
  UpdateSessionDto,
} from "../../models";

export const getSessionsControllerCreateV0Url = (classId: number) => {
  return `/api/v0/classes/${classId}/sessions`;
};

export const sessionsControllerCreateV0 = async (
  classId: number,
  createSessionDto: CreateSessionDto,
  options?: RequestInit,
): Promise<ExistingSessionDto> => {
  return fetchApi<Promise<ExistingSessionDto>>(
    getSessionsControllerCreateV0Url(classId),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createSessionDto),
    },
  );
};

export const getSessionsControllerFindAllV0Url = (classId: number) => {
  return `/api/v0/classes/${classId}/sessions`;
};

export const sessionsControllerFindAllV0 = async (
  classId: number,
  options?: RequestInit,
): Promise<ExistingSessionDto[]> => {
  return fetchApi<Promise<ExistingSessionDto[]>>(
    getSessionsControllerFindAllV0Url(classId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSessionsControllerIsAnonymousV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}/is-anonymous`;
};

export const sessionsControllerIsAnonymousV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<IsSessionAnonymousDto> => {
  return fetchApi<Promise<IsSessionAnonymousDto>>(
    getSessionsControllerIsAnonymousV0Url(classId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSessionsControllerFindOneV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}`;
};

export const sessionsControllerFindOneV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingSessionExtendedDto> => {
  return fetchApi<Promise<ExistingSessionExtendedDto>>(
    getSessionsControllerFindOneV0Url(classId, id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getSessionsControllerUpdateV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}`;
};

export const sessionsControllerUpdateV0 = async (
  classId: number,
  id: number,
  updateSessionDto: UpdateSessionDto,
  options?: RequestInit,
): Promise<ExistingSessionDto> => {
  return fetchApi<Promise<ExistingSessionDto>>(
    getSessionsControllerUpdateV0Url(classId, id),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateSessionDto),
    },
  );
};

export const getSessionsControllerRemoveV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}`;
};

export const sessionsControllerRemoveV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<DeletedSessionDto> => {
  return fetchApi<Promise<DeletedSessionDto>>(
    getSessionsControllerRemoveV0Url(classId, id),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getSessionsControllerStartV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}/start`;
};

export const sessionsControllerStartV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingSessionDto> => {
  return fetchApi<Promise<ExistingSessionDto>>(
    getSessionsControllerStartV0Url(classId, id),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getSessionsControllerPauseV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}/pause`;
};

export const sessionsControllerPauseV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingSessionDto> => {
  return fetchApi<Promise<ExistingSessionDto>>(
    getSessionsControllerPauseV0Url(classId, id),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getSessionsControllerFinishV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}/finish`;
};

export const sessionsControllerFinishV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<ExistingSessionDto> => {
  return fetchApi<Promise<ExistingSessionDto>>(
    getSessionsControllerFinishV0Url(classId, id),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getSessionsControllerGetSessionProgressV0Url = (
  classId: number,
  id: number,
) => {
  return `/api/v0/classes/${classId}/sessions/${id}/progress`;
};

export const sessionsControllerGetSessionProgressV0 = async (
  classId: number,
  id: number,
  options?: RequestInit,
): Promise<StudentSessionProgressDto> => {
  return fetchApi<Promise<StudentSessionProgressDto>>(
    getSessionsControllerGetSessionProgressV0Url(classId, id),
    {
      ...options,
      method: "GET",
    },
  );
};
