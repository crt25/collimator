/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description
 * OpenAPI spec version: 0.1
 */
import type {
  CreateUserDto,
  DeletedUserDto,
  ExistingUserDto,
  UpdateUserDto,
} from "../../models";
import { fetchApi } from "../../../../fetch";

export const getUsersControllerCreateUrl = () => {
  return `/users`;
};

export const usersControllerCreate = async (
  createUserDto: CreateUserDto,
  options?: RequestInit,
): Promise<ExistingUserDto> => {
  return fetchApi<Promise<ExistingUserDto>>(getUsersControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createUserDto),
  });
};

export const getUsersControllerFindAllUrl = () => {
  return `/users`;
};

export const usersControllerFindAll = async (
  options?: RequestInit,
): Promise<ExistingUserDto[]> => {
  return fetchApi<Promise<ExistingUserDto[]>>(getUsersControllerFindAllUrl(), {
    ...options,
    method: "GET",
  });
};

export const getUsersControllerFindOneUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerFindOne = async (
  id: number,
  options?: RequestInit,
): Promise<ExistingUserDto> => {
  return fetchApi<Promise<ExistingUserDto>>(getUsersControllerFindOneUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getUsersControllerUpdateUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerUpdate = async (
  id: number,
  updateUserDto: UpdateUserDto,
  options?: RequestInit,
): Promise<ExistingUserDto> => {
  return fetchApi<Promise<ExistingUserDto>>(getUsersControllerUpdateUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateUserDto),
  });
};

export const getUsersControllerDeleteUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerDelete = async (
  id: number,
  options?: RequestInit,
): Promise<DeletedUserDto> => {
  return fetchApi<Promise<DeletedUserDto>>(getUsersControllerDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
};
