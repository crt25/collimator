/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description
 * OpenAPI spec version: 0.1
 */
import type {
  CreateUserDto,
  DeletedUserDto,
  ExistingUserDto,
  UpdateUserDto,
} from "../../models";

export type usersControllerCreateResponse = {
  data: ExistingUserDto;
  status: number;
};

export const getUsersControllerCreateUrl = () => {
  return `/users`;
};

export const usersControllerCreate = async (
  createUserDto: CreateUserDto,
  options?: RequestInit,
): Promise<usersControllerCreateResponse> => {
  const res = await fetch(getUsersControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createUserDto),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type usersControllerFindAllResponse = {
  data: ExistingUserDto[];
  status: number;
};

export const getUsersControllerFindAllUrl = () => {
  return `/users`;
};

export const usersControllerFindAll = async (
  options?: RequestInit,
): Promise<usersControllerFindAllResponse> => {
  const res = await fetch(getUsersControllerFindAllUrl(), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type usersControllerFindOneResponse = {
  data: ExistingUserDto;
  status: number;
};

export const getUsersControllerFindOneUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerFindOne = async (
  id: number,
  options?: RequestInit,
): Promise<usersControllerFindOneResponse> => {
  const res = await fetch(getUsersControllerFindOneUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type usersControllerUpdateResponse = {
  data: ExistingUserDto;
  status: number;
};

export const getUsersControllerUpdateUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerUpdate = async (
  id: number,
  updateUserDto: UpdateUserDto,
  options?: RequestInit,
): Promise<usersControllerUpdateResponse> => {
  const res = await fetch(getUsersControllerUpdateUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateUserDto),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type usersControllerDeleteResponse = {
  data: DeletedUserDto;
  status: number;
};

export const getUsersControllerDeleteUrl = (id: number) => {
  return `/users/${id}`;
};

export const usersControllerDelete = async (
  id: number,
  options?: RequestInit,
): Promise<usersControllerDeleteResponse> => {
  const res = await fetch(getUsersControllerDeleteUrl(id), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};
