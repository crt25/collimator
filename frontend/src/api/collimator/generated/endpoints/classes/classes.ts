/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import type {
  ClassesControllerFindAllV0Params,
  CreateClassDto,
  DeletedClassDto,
  ExistingClassDto,
  ExistingClassExtendedDto,
  ExistingClassWithTeacherDto,
  UpdateClassDto,
} from "../../models";
import { fetchApi } from "../../../../fetch";

export const getClassesControllerCreateV0Url = () => {
  return `/api/v0/classes`;
};

export const classesControllerCreateV0 = async (
  createClassDto: CreateClassDto,
  options?: RequestInit,
): Promise<ExistingClassDto> => {
  return fetchApi<Promise<ExistingClassDto>>(
    getClassesControllerCreateV0Url(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(createClassDto),
    },
  );
};

export const getClassesControllerFindAllV0Url = (
  params?: ClassesControllerFindAllV0Params,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `/api/v0/classes?${normalizedParams.toString()}`
    : `/api/v0/classes`;
};

export const classesControllerFindAllV0 = async (
  params?: ClassesControllerFindAllV0Params,
  options?: RequestInit,
): Promise<ExistingClassWithTeacherDto[]> => {
  return fetchApi<Promise<ExistingClassWithTeacherDto[]>>(
    getClassesControllerFindAllV0Url(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getClassesControllerFindOneV0Url = (id: number) => {
  return `/api/v0/classes/${id}`;
};

export const classesControllerFindOneV0 = async (
  id: number,
  options?: RequestInit,
): Promise<ExistingClassExtendedDto> => {
  return fetchApi<Promise<ExistingClassExtendedDto>>(
    getClassesControllerFindOneV0Url(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getClassesControllerUpdateV0Url = (id: number) => {
  return `/api/v0/classes/${id}`;
};

export const classesControllerUpdateV0 = async (
  id: number,
  updateClassDto: UpdateClassDto,
  options?: RequestInit,
): Promise<ExistingClassDto> => {
  return fetchApi<Promise<ExistingClassDto>>(
    getClassesControllerUpdateV0Url(id),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateClassDto),
    },
  );
};

export const getClassesControllerRemoveV0Url = (id: number) => {
  return `/api/v0/classes/${id}`;
};

export const classesControllerRemoveV0 = async (
  id: number,
  options?: RequestInit,
): Promise<DeletedClassDto> => {
  return fetchApi<Promise<DeletedClassDto>>(
    getClassesControllerRemoveV0Url(id),
    {
      ...options,
      method: "DELETE",
    },
  );
};
