/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description
 * OpenAPI spec version: 0.1
 */
import type {
  ClassesControllerFindAllParams,
  CreateClassDto,
  DeletedClassDto,
  ExistingClassDto,
  ExistingClassExtendedDto,
  ExistingClassWithTeacherDto,
  UpdateClassDto,
} from "../../models";
import { fetchApi } from "../../../../fetch";

export const getClassesControllerCreateUrl = () => {
  return `/classes`;
};

export const classesControllerCreate = async (
  createClassDto: CreateClassDto,
  options?: RequestInit,
): Promise<ExistingClassDto> => {
  return fetchApi<Promise<ExistingClassDto>>(getClassesControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createClassDto),
  });
};

export const getClassesControllerFindAllUrl = (
  params?: ClassesControllerFindAllParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `/classes?${normalizedParams.toString()}`
    : `/classes`;
};

export const classesControllerFindAll = async (
  params?: ClassesControllerFindAllParams,
  options?: RequestInit,
): Promise<ExistingClassWithTeacherDto[]> => {
  return fetchApi<Promise<ExistingClassWithTeacherDto[]>>(
    getClassesControllerFindAllUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getClassesControllerFindOneUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerFindOne = async (
  id: number,
  options?: RequestInit,
): Promise<ExistingClassExtendedDto> => {
  return fetchApi<Promise<ExistingClassExtendedDto>>(
    getClassesControllerFindOneUrl(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getClassesControllerUpdateUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerUpdate = async (
  id: number,
  updateClassDto: UpdateClassDto,
  options?: RequestInit,
): Promise<ExistingClassDto> => {
  return fetchApi<Promise<ExistingClassDto>>(
    getClassesControllerUpdateUrl(id),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateClassDto),
    },
  );
};

export const getClassesControllerRemoveUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerRemove = async (
  id: number,
  options?: RequestInit,
): Promise<DeletedClassDto> => {
  return fetchApi<Promise<DeletedClassDto>>(getClassesControllerRemoveUrl(id), {
    ...options,
    method: "DELETE",
  });
};
