/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description
 * OpenAPI spec version: 0.1
 */
import type {
  ClassesControllerFindAllParams,
  CreateClassDto,
  DeletedClassDto,
  ExistingClassDto,
  ExistingClassExtendedDto,
  ExistingClassWithTeacherDto,
  UpdateClassDto,
} from "../../models";

export type classesControllerCreateResponse = {
  data: ExistingClassDto;
  status: number;
};

export const getClassesControllerCreateUrl = () => {
  return `/classes`;
};

export const classesControllerCreate = async (
  createClassDto: CreateClassDto,
  options?: RequestInit,
): Promise<classesControllerCreateResponse> => {
  const res = await fetch(getClassesControllerCreateUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createClassDto),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type classesControllerFindAllResponse = {
  data: ExistingClassWithTeacherDto[];
  status: number;
};

export const getClassesControllerFindAllUrl = (
  params?: ClassesControllerFindAllParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  return normalizedParams.size
    ? `/classes?${normalizedParams.toString()}`
    : `/classes`;
};

export const classesControllerFindAll = async (
  params?: ClassesControllerFindAllParams,
  options?: RequestInit,
): Promise<classesControllerFindAllResponse> => {
  const res = await fetch(getClassesControllerFindAllUrl(params), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type classesControllerFindOneResponse = {
  data: ExistingClassExtendedDto;
  status: number;
};

export const getClassesControllerFindOneUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerFindOne = async (
  id: number,
  options?: RequestInit,
): Promise<classesControllerFindOneResponse> => {
  const res = await fetch(getClassesControllerFindOneUrl(id), {
    ...options,
    method: "GET",
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type classesControllerUpdateResponse = {
  data: ExistingClassDto;
  status: number;
};

export const getClassesControllerUpdateUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerUpdate = async (
  id: number,
  updateClassDto: UpdateClassDto,
  options?: RequestInit,
): Promise<classesControllerUpdateResponse> => {
  const res = await fetch(getClassesControllerUpdateUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateClassDto),
  });
  const data = await res.json();

  return { status: res.status, data };
};

export type classesControllerRemoveResponse = {
  data: DeletedClassDto;
  status: number;
};

export const getClassesControllerRemoveUrl = (id: number) => {
  return `/classes/${id}`;
};

export const classesControllerRemove = async (
  id: number,
  options?: RequestInit,
): Promise<classesControllerRemoveResponse> => {
  const res = await fetch(getClassesControllerRemoveUrl(id), {
    ...options,
    method: "DELETE",
  });
  const data = await res.json();

  return { status: res.status, data };
};
