/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Collimator
 * The Collimator API description (multi-version)
 * OpenAPI spec version: 1.0.0
 */
import { fetchApi } from "../../../../fetch";
import type {
  CreateTaskDto,
  DeletedTaskDto,
  ExistingTaskDto,
  ExistingTaskWithReferenceSolutionsDto,
  UpdateTaskDto,
} from "../../models";

export const getTasksControllerCreateV0Url = () => {
  return `/api/v0/tasks`;
};

export const tasksControllerCreateV0 = async (
  createTaskDto: CreateTaskDto,
  options?: RequestInit,
): Promise<ExistingTaskDto> => {
  const formData = new FormData();
  formData.append("title", createTaskDto.title);
  formData.append("description", createTaskDto.description);
  formData.append("type", createTaskDto.type);
  formData.append("taskFile", createTaskDto.taskFile);
  createTaskDto.referenceSolutionsFiles.forEach((value) =>
    formData.append("referenceSolutionsFiles", value),
  );
  createTaskDto.referenceSolutions.forEach((value) =>
    formData.append("referenceSolutions", JSON.stringify(value)),
  );

  return fetchApi<ExistingTaskDto>(getTasksControllerCreateV0Url(), {
    ...options,
    method: "POST",
    body: formData,
  });
};

export const getTasksControllerFindAllV0Url = () => {
  return `/api/v0/tasks`;
};

export const tasksControllerFindAllV0 = async (
  options?: RequestInit,
): Promise<ExistingTaskDto[]> => {
  return fetchApi<ExistingTaskDto[]>(getTasksControllerFindAllV0Url(), {
    ...options,
    method: "GET",
  });
};

export const getTasksControllerFindOneV0Url = (id: number) => {
  return `/api/v0/tasks/${id}`;
};

export const tasksControllerFindOneV0 = async (
  id: number,
  options?: RequestInit,
): Promise<ExistingTaskDto> => {
  return fetchApi<ExistingTaskDto>(getTasksControllerFindOneV0Url(id), {
    ...options,
    method: "GET",
  });
};

export const getTasksControllerUpdateV0Url = (id: number) => {
  return `/api/v0/tasks/${id}`;
};

export const tasksControllerUpdateV0 = async (
  id: number,
  updateTaskDto: UpdateTaskDto,
  options?: RequestInit,
): Promise<ExistingTaskDto> => {
  const formData = new FormData();
  formData.append("title", updateTaskDto.title);
  formData.append("description", updateTaskDto.description);
  formData.append("type", updateTaskDto.type);
  formData.append("taskFile", updateTaskDto.taskFile);
  updateTaskDto.referenceSolutionsFiles.forEach((value) =>
    formData.append("referenceSolutionsFiles", value),
  );
  updateTaskDto.referenceSolutions.forEach((value) =>
    formData.append("referenceSolutions", JSON.stringify(value)),
  );

  return fetchApi<ExistingTaskDto>(getTasksControllerUpdateV0Url(id), {
    ...options,
    method: "PATCH",
    body: formData,
  });
};

export const getTasksControllerRemoveV0Url = (id: number) => {
  return `/api/v0/tasks/${id}`;
};

export const tasksControllerRemoveV0 = async (
  id: number,
  options?: RequestInit,
): Promise<DeletedTaskDto> => {
  return fetchApi<DeletedTaskDto>(getTasksControllerRemoveV0Url(id), {
    ...options,
    method: "DELETE",
  });
};

export const getTasksControllerFindOneWithReferenceSolutionsV0Url = (
  id: number,
) => {
  return `/api/v0/tasks/${id}/with-reference-solutions`;
};

export const tasksControllerFindOneWithReferenceSolutionsV0 = async (
  id: number,
  options?: RequestInit,
): Promise<ExistingTaskWithReferenceSolutionsDto> => {
  return fetchApi<ExistingTaskWithReferenceSolutionsDto>(
    getTasksControllerFindOneWithReferenceSolutionsV0Url(id),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getTasksControllerDownloadOneV0Url = (id: number) => {
  return `/api/v0/tasks/${id}/download`;
};

export const tasksControllerDownloadOneV0 = async (
  id: number,
  options?: RequestInit,
): Promise<void> => {
  return fetchApi<void>(getTasksControllerDownloadOneV0Url(id), {
    ...options,
    method: "GET",
  });
};
