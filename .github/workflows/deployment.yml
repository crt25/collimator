name: Development Deployment

# only allow one workflow running at a given point that deploys the development environment
concurrency: development-deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REGISTRY_URI: ${{ vars.ECR_REGISTRY_URI }}
  ROLE_TO_ASSUME: ${{ vars.DEV_ROLE_TO_ASSUME }}
  DEPLOY_URL : ${{ vars.DEPLOY_URL }}
  ENTRA_ID_CLIENT_ID: ${{ vars.ENTRA_ID_CLIENT_ID }}
  BACKEND_IMAGE_NAME: collimator-dev-backend
  FRONTEND_BUCKET_ID: collimator-dev-static-frontend
  SCRATCH_APP_BUCKET_ID: collimator-dev-app-scratch
  TERRAFORM_STATE_BUCKET: collimator-dev-cd-tf-state

  # https://docs.sentry.io/platforms/javascript/configuration/options/#common-options
  SENTRY_RELEASE: ${{ github.sha }}
  SENTRY_ENVIRONMENT: development

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  tests:
    uses: ./.github/workflows/tests.yml
    secrets: inherit

  deploy:
    needs: [tests]
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    services:
        # Label used to access the service container
        postgres:
            # Docker Hub image
            image: postgres
            # Provide the password for postgres
            env:
                POSTGRES_PASSWORD: postgres
            # Set health checks to wait until postgres has started
            options: >-
                --health-cmd pg_isready
                --health-interval 10s
                --health-timeout 5s
                --health-retries 5
            ports:
                # Maps TCP port 5433 on the host to Postgres
                - 5433:5432
                
    env:
        DATABASE_URL: "postgresql://postgres:postgres@localhost:5433/collimator?schema=public"

    steps:
    
      # Build application and prepare deployment

      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          lfs: 'true'
          fetch-depth: 0

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{ env.ROLE_TO_ASSUME }}
            aws-region: ${{ env.AWS_REGION }}
        
      - name: Enable Corepack
        run: corepack enable

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: yarn install

      - name: Install scratch app dependencies
        working-directory: ./apps/scratch
        run: yarn install

      - name: Install backend dependencies
        working-directory: ./backend
        run: yarn install

      - name: Build frontend
        working-directory: ./frontend
        run: yarn build
        env:
          NEXT_PUBLIC_BACKEND_HOSTNAME: ${{ env.DEPLOY_URL }}
          NEXT_PUBLIC_SCRATCH_APP_HOSTNAME: ${{ env.DEPLOY_URL }}/scratch
          NEXT_PUBLIC_OPEN_ID_CONNECT_MICROSOFT_SERVER: https://login.microsoftonline.com/common/v2.0/
          NEXT_PUBLIC_OPEN_ID_CONNECT_MICROSOFT_CLIENT_ID: ${{ env.ENTRA_ID_CLIENT_ID }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ env.FRONTEND_SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.FRONTEND_SENTRY_AUTH_TOKEN }}

      - name: Build scratch app
        working-directory: ./apps/scratch
        run: yarn build
        env:
          REACT_APP_SENTRY_DSN: ${{ env.APP_SCRATCH_SENTRY_DSN }}

      - name: Upload scratch app source maps
        working-directory: ./apps/scratch
        run: yarn sentry:sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.APP_SCRATCH_SENTRY_AUTH_TOKEN }}

      - name: Install OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Init terraform
        run: tofu init -var="tfstate_bucket_name=${{ env.TERRAFORM_STATE_BUCKET }}"
        working-directory: ./terraform/deployment

      # the database must be fully migrated before running prisma:generate
      # we build the backend so that we can upload the source maps to sentry
      - name: Prepare test database
        working-directory: ./backend
        run: yarn prisma migrate deploy

      - name: Build backend
        working-directory: ./backend
        run: yarn prisma:generate && yarn build

      - name: Upload backend source maps
        working-directory: ./backend
        run: yarn sentry:sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.BACKEND_SENTRY_AUTH_TOKEN }}

      - name: Build backend docker image
        run: docker build -t ${{ env.BACKEND_IMAGE_NAME }} .
        working-directory: ./backend

      - name: Tag docker image
        run: docker tag ${{ env.BACKEND_IMAGE_NAME }}:latest ${{ env.ECR_REGISTRY_URI }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        working-directory: ./backend

      # Actual deployment

      - name: Deploy to S3 buckets
        run: tofu apply -auto-approve -var="frontend_bucket_id=${{ env.FRONTEND_BUCKET_ID }}" -var="scratchapp_bucket_id=${{ env.SCRATCH_APP_BUCKET_ID }}" -var="region=${{ env.AWS_REGION }}" -var="tfstate_bucket_name=${{ env.TERRAFORM_STATE_BUCKET }}"
        working-directory: ./terraform/deployment

      - name: Authenticate to ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY_URI }}

      - name: Upload docker image
        run: docker push ${{ env.ECR_REGISTRY_URI }}/${{ env.BACKEND_IMAGE_NAME }}:latest
        working-directory: ./backend

      # not trivial with terraform, so we do it via the AWS CLI
      - name: Deploy new docker image
        run: aws ecs update-service --cluster collimator-dev-backend --service collimator-dev-backend --force-new-deployment
        working-directory: ./backend
