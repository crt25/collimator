// This is the Prisma schema file, used to define the data model.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // "prismaSchemaFolder" is not yet supported by JetBrains IDEs
  previewFeatures = ["omitApi"] // ,"prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  TEACHER
  ADMIN
}

model User {
  id    Int      @id @default(autoincrement())
  name  String?
  email String   @unique
  type  UserType

  classes Class[]
}

model Class {
  id        Int    @id @default(autoincrement())
  name      String
  teacherId Int

  teacher  User      @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  students Student[]
  sessions Session[]
}

model Student {
  id      String @id // anonymized (teacher-computed) ID
  classId Int

  class     Class      @relation(fields: [classId], references: [id], onDelete: Restrict)
  solutions Solution[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  classId   Int

  class     Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  tasks     SessionTask[]
  solutions Solution[]
}

enum TaskType {
  SCRATCH
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        TaskType
  data        Bytes
  mimeType    String

  solutions Solution[]
  sessions  SessionTask[]
}

model SessionTask {
  sessionId Int
  taskId    Int

  session   Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Restrict)
  solutions Solution[]

  @@id([sessionId, taskId])
}

model Solution {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  data      String
  mimeType  String
  studentId String
  taskId    Int
  sessionId Int

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Restrict)
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Restrict)
  sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)

  analysis SolutionAnalysis?
}

model SolutionAnalysis {
  id         Int    @id @default(autoincrement())
  solutionId Int    @unique
  genericAst String

  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
}
