// This is the Prisma schema file, used to define the data model.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // "prismaSchemaFolder" is not yet supported by JetBrains IDEs
  previewFeatures = ["omitApi"] // ,"prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  TEACHER
  ADMIN
}

model User {
  id    Int      @id @default(autoincrement())
  name  String?
  email String   @unique
  type  UserType

  classes Class[]
  lessons Lesson[]
  tasks   Task[]
}

model Class {
  id        Int    @id @default(autoincrement())
  name      String
  teacherId Int

  teacher  User      @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  students Student[]
  sessions Session[]
}

model Student {
  id        Int    @id @default(autoincrement()) // auto-inceremented ID for clustering - avoids fragmentation
  pseudonym String @unique // anonymized (teacher-computed) ID
  classId   Int

  class     Class      @relation(fields: [classId], references: [id], onDelete: Restrict)
  solutions Solution[]
  // studentActivity StudentActivity[]
}

enum LessonVisibility {
  PUBLIC
  PRIVATE
}

model Lesson {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  title       String
  description String
  visibility  LessonVisibility
  creatorId   Int?

  tasks    LessonTask[]
  sessions Session[]
  creator  User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}

enum SessionStatus {
  CREATED
  ONGOING
  PAUSED
  FINISHED
}

model Session {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  title           String
  description     String
  classId         Int
  basedOnLessonId Int?
  status          SessionStatus @default(CREATED)

  lesson    Lesson?       @relation(fields: [basedOnLessonId], references: [id], onDelete: SetNull)
  class     Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  tasks     SessionTask[]
  solutions Solution[]
  // studentActivity StudentActivity[]
}

enum TaskType {
  SCRATCH
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        TaskType
  data        Bytes
  mimeType    String
  creatorId   Int?

  solutions Solution[]
  sessions  SessionTask[]
  lessons   LessonTask[]
  creator   User?         @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  // studentActivity StudentActivity[]
}

model LessonTask {
  lessonId Int
  taskId   Int
  index    Int

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Restrict)

  @@id([lessonId, taskId])
}

model SessionTask {
  sessionId Int
  taskId    Int
  index     Int

  session   Session    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  task      Task       @relation(fields: [taskId], references: [id], onDelete: Restrict)
  solutions Solution[]
  // studentActivity StudentActivity[]

  @@id([sessionId, taskId])
}

model Solution {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  data      Bytes
  mimeType  String
  studentId Int
  taskId    Int
  sessionId Int

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Restrict)
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Restrict)
  sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)

  analysis SolutionAnalysis?
}

model SolutionAnalysis {
  id         Int    @id @default(autoincrement())
  solutionId Int    @unique
  genericAst String

  solution Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
}

// Tables to keep intermediate student activity:
//
// enum StudentActivityType {
//   TASK_STARTED
//   TASK_RUN_SOLUTION
//   TASK_TEST_RESULTS
//   TASK_CLOSED
//   TASK_APP_ACTIVITY
// }
//
// model StudentActivity {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//
//   type StudentActivityType
//
//   studentId String
//   sessionId Int
//   taskId    Int
//
//   student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
//   task        Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
//   sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)
//
//   appActivity StudentActivityApp?
// }
//
// model StudentActivityApp {
//   id Int @id
//
//   type String
//   data String
//
//   studentActivity StudentActivity @relation(fields: [id], references: [id], onDelete: Cascade)
// }
