// This is the Prisma schema file, used to define the data model.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // "prismaSchemaFolder" is not yet supported by JetBrains IDEs
  previewFeatures = ["typedSql"] // ,"prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  TEACHER
  ADMIN // admins are also teachers
}

enum AuthenticationProvider {
  MICROSOFT
}

model User {
  id                     Int                    @id @default(autoincrement())
  name                   String?
  oidcSub                String?
  email                  String
  authenticationProvider AuthenticationProvider
  type                   UserType

  keyPair              KeyPair?
  registrationToken    RegistrationToken?
  authenticationTokens AuthenticationToken[]
  classes              Class[]
  lessons              Lesson[]
  tasks                Task[]

  @@unique([oidcSub, authenticationProvider], name: "uniqueOidcSubPerProvider")
  @@unique([email, authenticationProvider], name: "uniqueEmailPerProvider")
}

model KeyPair {
  id                   Int      @id @default(autoincrement())
  teacherId            Int      @unique
  publicKey            Bytes // A teacher's public key
  publicKeyFingerprint String   @unique // The SHA-512 fingerprint of the public key encoded in URL-safe base64. the unique is used to lookup the key by fingerprint.
  createdAt            DateTime @default(now())

  // Salt used to derive a symmetric key based on this keypair.
  // For now, it is equal to a random public key s.t. we can perform ECDH with it
  // and derive a symmetric key using the web crypto API which has its limitations.
  salt Bytes

  privateKeys EncryptedPrivateKey[] // the private key corresponding to this public key encrypted using different password-derived keys
  teacher     User                   @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  Student     AuthenticatedStudent[]
}

model EncryptedPrivateKey {
  id                  Int   @id @default(autoincrement())
  publicKeyId         Int // The public key this private key corresponds to
  encryptedPrivateKey Bytes // A teacher's private key encrypted with a password-derived key
  salt                Bytes // The salt used to derive the password key that was used to encrypt the private key

  publicKey KeyPair @relation(fields: [publicKeyId], references: [id], onDelete: Cascade)
}

model Class {
  id        Int    @id @default(autoincrement())
  name      String
  teacherId Int

  teacher  User                   @relation(fields: [teacherId], references: [id], onDelete: Restrict)
  students AuthenticatedStudent[]
  sessions Session[]
}

model Student {
  id Int @id @default(autoincrement()) // auto-inceremented ID for clustering - avoids fragmentation

  authenticatedStudent AuthenticatedStudent?
  anonymousStudent     AnonymousStudent?

  authenticationTokens AuthenticationToken[]
  solutions            StudentSolution[]
  studentActivities    StudentActivity[]
}

model AuthenticatedStudent {
  studentId Int   @id
  pseudonym Bytes // anonymized (teacher-computed) pseudonym for the student (encrypted identity)
  classId   Int // authenticated students are assigned to a class,
  keyPairId Int? // if null, the respective key is no longer available

  student        Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class          Class    @relation(fields: [classId], references: [id], onDelete: Restrict)
  encryptedUsing KeyPair? @relation(fields: [keyPairId], references: [id], onDelete: SetNull)

  @@unique([pseudonym, classId], name: "pseudonymUniquePerClass")
}

model AnonymousStudent {
  studentId Int @id
  sessionId Int // anonymous students are always assigned to a session

  student Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session Session? @relation(fields: [sessionId], references: [id], onDelete: Restrict)
}

enum LessonVisibility {
  PUBLIC
  PRIVATE
}

model Lesson {
  id          Int              @id @default(autoincrement())
  createdAt   DateTime         @default(now())
  title       String
  description String
  visibility  LessonVisibility
  creatorId   Int?

  tasks    LessonTask[]
  sessions Session[]
  creator  User?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}

enum SessionStatus {
  CREATED
  ONGOING
  PAUSED
  FINISHED
}

model Session {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  title           String
  description     String
  classId         Int
  basedOnLessonId Int?
  status          SessionStatus @default(CREATED)
  isAnonymous     Boolean       @default(false)

  lesson            Lesson?            @relation(fields: [basedOnLessonId], references: [id], onDelete: SetNull)
  class             Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  tasks             SessionTask[]
  solutions         StudentSolution[]
  anonymousStudents AnonymousStudent[]
  studentActivities StudentActivity[]
}

enum TaskType {
  SCRATCH
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        TaskType
  data        Bytes
  mimeType    String
  creatorId   Int?

  studentSolutions   StudentSolution[]
  referenceSolutions ReferenceSolution[]
  sessions           SessionTask[]
  lessons            LessonTask[]
  creator            User?               @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  studentActivities  StudentActivity[]
  solution           Solution[]
}

model LessonTask {
  lessonId Int
  taskId   Int
  index    Int

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Restrict)

  @@id([lessonId, taskId])
}

model SessionTask {
  sessionId Int
  taskId    Int
  index     Int

  session           Session           @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  task              Task              @relation(fields: [taskId], references: [id], onDelete: Restrict)
  solutions         StudentSolution[]
  studentActivities StudentActivity[]

  @@id([sessionId, taskId])
}

model Solution {
  taskId Int
  hash   Bytes

  data           Bytes
  mimeType       String
  failedAnalyses Int    @default(0)

  analysis           SolutionAnalysis?
  task               Task                @relation(fields: [taskId], references: [id], onDelete: Restrict)
  referenceSolutions ReferenceSolution[]
  studentSolutions   StudentSolution[]
  studentActivities  StudentActivity[]

  @@id([taskId, hash])
}

model ReferenceSolution {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  // Whether this solution is the initial solution for the task (i.e. the empty one provided to the students)
  isInitial   Boolean @default(false)

  taskId       Int
  solutionHash Bytes

  tests SolutionTest[]

  solution Solution @relation(fields: [taskId, solutionHash], references: [taskId, hash], onDelete: Cascade)
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, solutionHash])
}

model StudentSolution {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  taskId       Int
  solutionHash Bytes
  studentId    Int
  sessionId    Int
  isReference  Boolean  @default(false)

  tests SolutionTest[]

  solution    Solution    @relation(fields: [taskId, solutionHash], references: [taskId, hash], onDelete: Cascade)
  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Restrict)
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Restrict)
  sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)
}

model SolutionTest {
  id Int @id @default(autoincrement())

  referenceSolutionId Int?
  studentSolutionId   Int?

  identifier  String?
  name        String
  contextName String?
  passed      Boolean

  referenceSolution ReferenceSolution? @relation(fields: [referenceSolutionId], references: [id])
  studentSolution   StudentSolution?   @relation(fields: [studentSolutionId], references: [id])
}

enum AstVersion {
  v0
  v1
}

model SolutionAnalysis {
  taskId       Int
  solutionHash Bytes
  genericAst   String
  astVersion   AstVersion @default(v0)

  solution Solution @relation(fields: [taskId, solutionHash], references: [taskId, hash], onDelete: Cascade)

  @@id([taskId, solutionHash])
}

model RegistrationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  token     String   @unique
  userId    Int      @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthenticationToken {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  lastUsedAt DateTime
  token      String   @unique
  userId     Int?
  studentId  Int?

  user    User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  student Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

// Tables to keep intermediate student activity:

enum StudentActivityType {
  TASK_STARTED
  TASK_RUN_SOLUTION
  TASK_TEST_RESULTS
  TASK_CLOSED
  TASK_APP_ACTIVITY
}

model StudentActivity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  type       StudentActivityType
  // measured by the client and may therefore be completely different from createdAt
  happenedAt DateTime

  studentId    Int
  sessionId    Int
  taskId       Int
  solutionHash Bytes

  student     Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  task        Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)
  solution    Solution    @relation(fields: [taskId, solutionHash], references: [taskId, hash], onDelete: Cascade)

  appActivity StudentActivityApp?

  @@unique([studentId, type, happenedAt], name: "uniqueStudentActivityPerTypeAndTime")
}

model StudentActivityApp {
  id Int @id

  type String
  data Bytes

  studentActivity StudentActivity @relation(fields: [id], references: [id], onDelete: Cascade)
}
