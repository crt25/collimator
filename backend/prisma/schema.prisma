// This is the Prisma schema file, used to define the data model.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // "prismaSchemaFolder" is not yet supported by JetBrains IDEs
  previewFeatures = ["omitApi"] // ,"prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  name    String?
  email   String   @unique
  Teacher Teacher?
  Student Student?
}

model Teacher {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes Class[]
}

model Student {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnonymousStudent {
  id Int @id @default(autoincrement())

  class   Class @relation(fields: [classId], references: [id])
  classId Int

  submissions Submission[]
}

model Class {
  id   Int    @id @default(autoincrement())
  name String

  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Restrict)

  students AnonymousStudent[]

  sessions Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  classId Int
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  tasks      SessionTask[]
  Submission Submission[]
}

enum TaskType {
  SCRATCH
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  type        TaskType

  rawData Bytes
  mimeType String

  submissions Submission[]
  sessions    SessionTask[]
}

model SessionTask {
  sessionId Int
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Restrict)

  submissions Submission[]

  @@id([sessionId, taskId])
}

model Submission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  rawContent String // The submission as-is
  analysis   SubmissionAnalysis? // the analysis results

  studentId Int
  student   AnonymousStudent @relation(fields: [studentId], references: [id], onDelete: Cascade)

  taskId Int
  task   Task @relation(fields: [taskId], references: [id], onDelete: Restrict)

  sessionId Int
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  sessionTask SessionTask @relation(fields: [sessionId, taskId], references: [sessionId, taskId], onDelete: Restrict)
}

model SubmissionAnalysis {
  id Int @id @default(autoincrement())

  submissionId Int        @unique
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  gAstData String // the G-AST generated from the submission
}
